
4100901-Mid_Term_Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080032ac  080032ac  000042ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003304  08003304  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003304  08003304  00004304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800330c  0800330c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800330c  0800330c  0000430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003310  08003310  00004310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003314  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003320  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003320  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a384  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001785  00000000  00000000  0000f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00010b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b4  00000000  00000000  00011408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c35  00000000  00000000  00011abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a799  00000000  00000000  000366f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3bbe  00000000  00000000  00040e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f0  00000000  00000000  00124a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00126d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003294 	.word	0x08003294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003294 	.word	0x08003294

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTI_Pin){
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d108      	bne.n	80004da <HAL_GPIO_EXTI_Callback+0x22>
		CONTI = 1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_GPIO_EXTI_Callback+0x44>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "RIGHT\r\n", 7, 20);
 80004ce:	2314      	movs	r3, #20
 80004d0:	2207      	movs	r2, #7
 80004d2:	490b      	ldr	r1, [pc, #44]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x48>)
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <HAL_GPIO_EXTI_Callback+0x4c>)
 80004d6:	f002 f953 	bl	8002780 <HAL_UART_Transmit>
	}
	if(GPIO_Pin == BTD_Pin){
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	2b10      	cmp	r3, #16
 80004de:	d108      	bne.n	80004f2 <HAL_GPIO_EXTI_Callback+0x3a>
			CONTD = 1;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <HAL_GPIO_EXTI_Callback+0x50>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, "LEFT\r\n", 6, 20);
 80004e6:	2314      	movs	r3, #20
 80004e8:	2206      	movs	r2, #6
 80004ea:	4908      	ldr	r1, [pc, #32]	@ (800050c <HAL_GPIO_EXTI_Callback+0x54>)
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <HAL_GPIO_EXTI_Callback+0x4c>)
 80004ee:	f002 f947 	bl	8002780 <HAL_UART_Transmit>
		}
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000b0 	.word	0x200000b0
 8000500:	080032ac 	.word	0x080032ac
 8000504:	20000028 	.word	0x20000028
 8000508:	200000b4 	.word	0x200000b4
 800050c:	080032b4 	.word	0x080032b4

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa26 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f83d 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8b1 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f87f 	bl	8000624 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (CONTI != 0){
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <main+0x7c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d014      	beq.n	8000558 <main+0x48>

			  for(uint8_t i = 0; i < 6; i++){
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e00b      	b.n	800054c <main+0x3c>
			  HAL_GPIO_TogglePin(LEDI_GPIO_Port, LEDI_Pin);
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 fd81 	bl	8001040 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 800053e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000542:	f000 fa85 	bl	8000a50 <HAL_Delay>
			  for(uint8_t i = 0; i < 6; i++){
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3301      	adds	r3, #1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b05      	cmp	r3, #5
 8000550:	d9f0      	bls.n	8000534 <main+0x24>

		  }


		  CONTI = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <main+0x7c>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 }
		  if (CONTD != 0){
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <main+0x80>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0e2      	beq.n	8000526 <main+0x16>

		  			  for(uint8_t i = 0; i < 6; i++){
 8000560:	2300      	movs	r3, #0
 8000562:	71bb      	strb	r3, [r7, #6]
 8000564:	e00a      	b.n	800057c <main+0x6c>
		  			  HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 8000566:	2140      	movs	r1, #64	@ 0x40
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <main+0x84>)
 800056a:	f000 fd69 	bl	8001040 <HAL_GPIO_TogglePin>
		  				HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000572:	f000 fa6d 	bl	8000a50 <HAL_Delay>
		  			  for(uint8_t i = 0; i < 6; i++){
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	3301      	adds	r3, #1
 800057a:	71bb      	strb	r3, [r7, #6]
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d9f1      	bls.n	8000566 <main+0x56>
		  		  }


		  		  CONTD = 0;
 8000582:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <main+0x80>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	  if (CONTI != 0){
 8000588:	e7cd      	b.n	8000526 <main+0x16>
 800058a:	bf00      	nop
 800058c:	200000b0 	.word	0x200000b0
 8000590:	200000b4 	.word	0x200000b4
 8000594:	48000400 	.word	0x48000400

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	@ 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	@ 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fe47 	bl	800323a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005be:	f000 fd7f 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 f8ce 	bl	8000768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005cc:	2310      	movs	r3, #16
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdc1 	bl	800116c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005f0:	f000 f8ba 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f989 	bl	8001924 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f8a6 	bl	8000768 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	@ 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <MX_USART2_UART_Init+0x5c>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000668:	f002 f83c 	bl	80026e4 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000672:	f000 f879 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <MX_GPIO_Init+0xdc>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a30      	ldr	r2, [pc, #192]	@ (8000760 <MX_GPIO_Init+0xdc>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000760 <MX_GPIO_Init+0xdc>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_GPIO_Init+0xdc>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <MX_GPIO_Init+0xdc>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_GPIO_Init+0xdc>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDI_GPIO_Port, LEDI_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f000 fc9d 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2140      	movs	r1, #64	@ 0x40
 80006da:	4822      	ldr	r0, [pc, #136]	@ (8000764 <MX_GPIO_Init+0xe0>)
 80006dc:	f000 fc98 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTI_Pin BTD_Pin */
  GPIO_InitStruct.Pin = BTI_Pin|BTD_Pin;
 80006e0:	2312      	movs	r3, #18
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f000 fae0 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDI_Pin */
  GPIO_InitStruct.Pin = LEDI_Pin;
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDI_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f000 fad1 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDD_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDD_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_GPIO_Init+0xe0>)
 8000732:	f000 fac3 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fa87 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000740:	2007      	movs	r0, #7
 8000742:	f000 faa0 	bl	8000c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	200a      	movs	r0, #10
 800074c:	f000 fa7f 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000750:	200a      	movs	r0, #10
 8000752:	f000 fa98 	bl	8000c86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	@ 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	@ 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0ac      	sub	sp, #176	@ 0xb0
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2288      	movs	r2, #136	@ 0x88
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fd2c 	bl	800323a <memset>
  if(huart->Instance==USART2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a21      	ldr	r2, [pc, #132]	@ (800086c <HAL_UART_MspInit+0xb0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d13b      	bne.n	8000864 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fab7 	bl	8001d6c <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000804:	f7ff ffb0 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 800080a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 800080e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000812:	6593      	str	r3, [r2, #88]	@ 0x58
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 8000816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_UART_MspInit+0xb4>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000838:	230c      	movs	r3, #12
 800083a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fa2c 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	37b0      	adds	r7, #176	@ 0xb0
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 f8a1 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTI_Pin);
 80008d6:	2002      	movs	r0, #2
 80008d8:	f000 fbcc 	bl	8001074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTD_Pin);
 80008e4:	2010      	movs	r0, #16
 80008e6:	f000 fbc5 	bl	8001074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f002 fc83 	bl	800324c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fde3 	bl	8000510 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000958:	08003314 	.word	0x08003314
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000960:	200000bc 	.word	0x200000bc

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f961 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fef4 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f96d 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f937 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200000b8 	.word	0x200000b8

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000b8 	.word	0x200000b8

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	@ (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	@ 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	@ 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e17f      	b.n	8000fcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8171 	beq.w	8000fc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d118      	bne.n	8000d9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	6939      	ldr	r1, [r7, #16]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80ac 	beq.w	8000fc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <HAL_GPIO_Init+0x330>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e72:	4a5e      	ldr	r2, [pc, #376]	@ (8000fec <HAL_GPIO_Init+0x330>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fec <HAL_GPIO_Init+0x330>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e86:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x242>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff4 <HAL_GPIO_Init+0x338>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x23e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff8 <HAL_GPIO_Init+0x33c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x23a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8000ffc <HAL_GPIO_Init+0x340>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x236>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8001000 <HAL_GPIO_Init+0x344>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x232>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8001004 <HAL_GPIO_Init+0x348>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x22e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4a      	ldr	r2, [pc, #296]	@ (8001008 <HAL_GPIO_Init+0x34c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x22a>
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e00c      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e00a      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000eea:	2305      	movs	r3, #5
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x244>
 8000efe:	2300      	movs	r3, #0
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f10:	4937      	ldr	r1, [pc, #220]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f42:	4a32      	ldr	r2, [pc, #200]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f48:	4b30      	ldr	r3, [pc, #192]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f6c:	4a27      	ldr	r2, [pc, #156]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f96:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <HAL_GPIO_Init+0x350>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f47f ae78 	bne.w	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	48001000 	.word	0x48001000
 8001004:	48001400 	.word	0x48001400
 8001008:	48001800 	.word	0x48001800
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102c:	e002      	b.n	8001034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4013      	ands	r3, r2
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43d9      	mvns	r1, r3
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	400b      	ands	r3, r1
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa10 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <HAL_PWREx_GetVoltageRange+0x18>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40007000 	.word	0x40007000

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ce:	d130      	bne.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d0:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010dc:	d038      	beq.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2232      	movs	r2, #50	@ 0x32
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001104:	e002      	b.n	800110c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3b01      	subs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001118:	d102      	bne.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x60>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f2      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800112c:	d110      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e00f      	b.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800113a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113e:	d007      	beq.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001148:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40007000 	.word	0x40007000
 8001164:	20000000 	.word	0x20000000
 8001168:	431bde83 	.word	0x431bde83

0800116c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e3ca      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117e:	4b97      	ldr	r3, [pc, #604]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001188:	4b94      	ldr	r3, [pc, #592]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80e4 	beq.w	8001368 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4a>
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	f040 808b 	bne.w	80012c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 8087 	bne.w	80012c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x62>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e3a2      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1a      	ldr	r2, [r3, #32]
 80011d2:	4b82      	ldr	r3, [pc, #520]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <HAL_RCC_OscConfig+0x7c>
 80011de:	4b7f      	ldr	r3, [pc, #508]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e6:	e005      	b.n	80011f4 <HAL_RCC_OscConfig+0x88>
 80011e8:	4b7c      	ldr	r3, [pc, #496]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d223      	bcs.n	8001240 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fd55 	bl	8001cac <RCC_SetFlashLatencyFromMSIRange>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e383      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b73      	ldr	r3, [pc, #460]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a72      	ldr	r2, [pc, #456]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	496d      	ldr	r1, [pc, #436]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122a:	4b6c      	ldr	r3, [pc, #432]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	4968      	ldr	r1, [pc, #416]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
 800123e:	e025      	b.n	800128c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001240:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a65      	ldr	r2, [pc, #404]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4960      	ldr	r1, [pc, #384]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b5f      	ldr	r3, [pc, #380]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	495b      	ldr	r1, [pc, #364]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fd15 	bl	8001cac <RCC_SetFlashLatencyFromMSIRange>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e343      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800128c:	f000 fc4a 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001290:	4602      	mov	r2, r0
 8001292:	4b52      	ldr	r3, [pc, #328]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	4950      	ldr	r1, [pc, #320]	@ (80013e0 <HAL_RCC_OscConfig+0x274>)
 800129e:	5ccb      	ldrb	r3, [r1, r3]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	4a4e      	ldr	r2, [pc, #312]	@ (80013e4 <HAL_RCC_OscConfig+0x278>)
 80012aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fb71 	bl	8000998 <HAL_InitTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d052      	beq.n	8001366 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	e327      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d032      	beq.n	8001332 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a42      	ldr	r2, [pc, #264]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fbae 	bl	8000a38 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbaa 	bl	8000a38 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e310      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f2:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a36      	ldr	r2, [pc, #216]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4931      	ldr	r1, [pc, #196]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	492c      	ldr	r1, [pc, #176]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e01a      	b.n	8001368 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a29      	ldr	r2, [pc, #164]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb7b 	bl	8000a38 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001346:	f7ff fb77 	bl	8000a38 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e2dd      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x1da>
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001366:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d074      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x21a>
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d10e      	bne.n	800139e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d064      	beq.n	800145c <HAL_RCC_OscConfig+0x2f0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d160      	bne.n	800145c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e2ba      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x24a>
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e026      	b.n	8001404 <HAL_RCC_OscConfig+0x298>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013be:	d115      	bne.n	80013ec <HAL_RCC_OscConfig+0x280>
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a02      	ldr	r2, [pc, #8]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e014      	b.n	8001404 <HAL_RCC_OscConfig+0x298>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	080032bc 	.word	0x080032bc
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004
 80013ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a9f      	ldr	r2, [pc, #636]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fb14 	bl	8000a38 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fb10 	bl	8000a38 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	@ 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e276      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x2a8>
 8001432:	e014      	b.n	800145e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb00 	bl	8000a38 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fafc 	bl	8000a38 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e262      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	4b88      	ldr	r3, [pc, #544]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x2d0>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d060      	beq.n	800152c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b04      	cmp	r3, #4
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x310>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	d119      	bne.n	80014aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d116      	bne.n	80014aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147c:	4b7c      	ldr	r3, [pc, #496]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x328>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e23f      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	4973      	ldr	r1, [pc, #460]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a8:	e040      	b.n	800152c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d023      	beq.n	80014fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fabb 	bl	8000a38 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fab7 	bl	8000a38 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e21d      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d8:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	495f      	ldr	r1, [pc, #380]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	e018      	b.n	800152c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff fa97 	bl	8000a38 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fa93 	bl	8000a38 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1f9      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01c      	beq.n	800157a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001546:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fa72 	bl	8000a38 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fa6e 	bl	8000a38 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1d4      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156a:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800156c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ef      	beq.n	8001558 <HAL_RCC_OscConfig+0x3ec>
 8001578:	e01b      	b.n	80015b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	4a3b      	ldr	r2, [pc, #236]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fa55 	bl	8000a38 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fa51 	bl	8000a38 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1b7      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ef      	bne.n	8001592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a6 	beq.w	800170c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015da:	6593      	str	r3, [r2, #88]	@ 0x58
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e8:	2301      	movs	r3, #1
 80015ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_RCC_OscConfig+0x508>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d118      	bne.n	800162a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_RCC_OscConfig+0x508>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001674 <HAL_RCC_OscConfig+0x508>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001604:	f7ff fa18 	bl	8000a38 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160c:	f7ff fa14 	bl	8000a38 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e17a      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x508>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_RCC_OscConfig+0x4d8>
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001642:	e029      	b.n	8001698 <HAL_RCC_OscConfig+0x52c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d115      	bne.n	8001678 <HAL_RCC_OscConfig+0x50c>
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001662:	4a03      	ldr	r2, [pc, #12]	@ (8001670 <HAL_RCC_OscConfig+0x504>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166c:	e014      	b.n	8001698 <HAL_RCC_OscConfig+0x52c>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000
 8001678:	4b9c      	ldr	r3, [pc, #624]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a9b      	ldr	r2, [pc, #620]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001688:	4b98      	ldr	r3, [pc, #608]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a97      	ldr	r2, [pc, #604]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d016      	beq.n	80016ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff f9ca 	bl	8000a38 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff f9c6 	bl	8000a38 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e12a      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016be:	4b8b      	ldr	r3, [pc, #556]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ed      	beq.n	80016a8 <HAL_RCC_OscConfig+0x53c>
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff f9b3 	bl	8000a38 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff f9af 	bl	8000a38 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e113      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ec:	4b7f      	ldr	r3, [pc, #508]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ed      	bne.n	80016d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4b7a      	ldr	r3, [pc, #488]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	4a79      	ldr	r2, [pc, #484]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80fe 	beq.w	8001912 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	2b02      	cmp	r3, #2
 800171c:	f040 80d0 	bne.w	80018c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001720:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	429a      	cmp	r2, r3
 8001732:	d130      	bne.n	8001796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	3b01      	subs	r3, #1
 8001740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d127      	bne.n	8001796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001750:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d11f      	bne.n	8001796 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001760:	2a07      	cmp	r2, #7
 8001762:	bf14      	ite	ne
 8001764:	2201      	movne	r2, #1
 8001766:	2200      	moveq	r2, #0
 8001768:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176a:	4293      	cmp	r3, r2
 800176c:	d113      	bne.n	8001796 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d109      	bne.n	8001796 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d06e      	beq.n	8001874 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d069      	beq.n	8001870 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800179c:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0ad      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017b8:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017c4:	f7ff f938 	bl	8000a38 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f934 	bl	8000a38 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e09a      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017de:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ea:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	4b40      	ldr	r3, [pc, #256]	@ (80018f0 <HAL_RCC_OscConfig+0x784>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017fa:	3a01      	subs	r2, #1
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001804:	0212      	lsls	r2, r2, #8
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800180c:	0852      	lsrs	r2, r2, #1
 800180e:	3a01      	subs	r2, #1
 8001810:	0552      	lsls	r2, r2, #21
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001818:	0852      	lsrs	r2, r2, #1
 800181a:	3a01      	subs	r2, #1
 800181c:	0652      	lsls	r2, r2, #25
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001824:	0912      	lsrs	r2, r2, #4
 8001826:	0452      	lsls	r2, r2, #17
 8001828:	430a      	orrs	r2, r1
 800182a:	4930      	ldr	r1, [pc, #192]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2d      	ldr	r2, [pc, #180]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001846:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001848:	f7ff f8f6 	bl	8000a38 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f8f2 	bl	8000a38 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e058      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800186e:	e050      	b.n	8001912 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e04f      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d148      	bne.n	8001912 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001898:	f7ff f8ce 	bl	8000a38 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f8ca 	bl	8000a38 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e030      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x734>
 80018be:	e028      	b.n	8001912 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d023      	beq.n	800190e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_RCC_OscConfig+0x780>)
 80018cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f8b1 	bl	8000a38 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f8ad 	bl	8000a38 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d905      	bls.n	80018f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e013      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_RCC_OscConfig+0x7b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4905      	ldr	r1, [pc, #20]	@ (800191c <HAL_RCC_OscConfig+0x7b0>)
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_RCC_OscConfig+0x7b4>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e001      	b.n	8001912 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	feeefffc 	.word	0xfeeefffc

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0e7      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b75      	ldr	r3, [pc, #468]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d910      	bls.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b72      	ldr	r3, [pc, #456]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0207 	bic.w	r2, r3, #7
 800194e:	4970      	ldr	r1, [pc, #448]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b6e      	ldr	r3, [pc, #440]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cf      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001980:	429a      	cmp	r2, r3
 8001982:	d908      	bls.n	8001996 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4960      	ldr	r1, [pc, #384]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04c      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d121      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0a6      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	4b54      	ldr	r3, [pc, #336]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e09a      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019da:	4b4e      	ldr	r3, [pc, #312]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e08e      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e086      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4943      	ldr	r1, [pc, #268]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a0c:	f7ff f814 	bl	8000a38 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f810 	bl	8000a38 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e06e      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d208      	bcs.n	8001a6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	492b      	ldr	r1, [pc, #172]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d210      	bcs.n	8001a9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 0207 	bic.w	r2, r3, #7
 8001a80:	4923      	ldr	r1, [pc, #140]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e036      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4918      	ldr	r1, [pc, #96]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4910      	ldr	r1, [pc, #64]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad8:	f000 f824 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	490b      	ldr	r1, [pc, #44]	@ (8001b18 <HAL_RCC_ClockConfig+0x1f4>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_RCC_ClockConfig+0x1fc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ff4b 	bl	8000998 <HAL_InitTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	080032bc 	.word	0x080032bc
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	4b3e      	ldr	r3, [pc, #248]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d121      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d11e      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b64:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b80:	4a2b      	ldr	r2, [pc, #172]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b9c:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e004      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001baa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d134      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0xa6>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d003      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bc8:	e005      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bcc:	617b      	str	r3, [r7, #20]
      break;
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bd2:	617b      	str	r3, [r7, #20]
      break;
 8001bd4:	e002      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	617b      	str	r3, [r7, #20]
      break;
 8001bda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	0e5b      	lsrs	r3, r3, #25
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080032d4 	.word	0x080032d4
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4904      	ldr	r1, [pc, #16]	@ (8001c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	080032cc 	.word	0x080032cc

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c84:	f7ff ffda 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0adb      	lsrs	r3, r3, #11
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4904      	ldr	r1, [pc, #16]	@ (8001ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	080032cc 	.word	0x080032cc

08001cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cc4:	f7ff f9ee 	bl	80010a4 <HAL_PWREx_GetVoltageRange>
 8001cc8:	6178      	str	r0, [r7, #20]
 8001cca:	e014      	b.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a24      	ldr	r2, [pc, #144]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce4:	f7ff f9de 	bl	80010a4 <HAL_PWREx_GetVoltageRange>
 8001ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cfc:	d10b      	bne.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b80      	cmp	r3, #128	@ 0x80
 8001d02:	d919      	bls.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d08:	d902      	bls.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e013      	b.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d10:	2301      	movs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	e010      	b.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b80      	cmp	r3, #128	@ 0x80
 8001d1a:	d902      	bls.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e00a      	b.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	d102      	bne.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d28:	2302      	movs	r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e004      	b.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b70      	cmp	r3, #112	@ 0x70
 8001d32:	d101      	bne.n	8001d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0207 	bic.w	r2, r3, #7
 8001d40:	4909      	ldr	r1, [pc, #36]	@ (8001d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d48:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d74:	2300      	movs	r3, #0
 8001d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d041      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d90:	d02a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d96:	d824      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d9c:	d008      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001da2:	d81e      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dac:	d010      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dae:	e018      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001db0:	4b86      	ldr	r3, [pc, #536]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a85      	ldr	r2, [pc, #532]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dbc:	e015      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fabb 	bl	8002340 <RCCEx_PLLSAI1_Config>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dce:	e00c      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fba6 	bl	8002528 <RCCEx_PLLSAI2_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de0:	e003      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	74fb      	strb	r3, [r7, #19]
      break;
 8001de6:	e000      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001df0:	4b76      	ldr	r3, [pc, #472]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dfe:	4973      	ldr	r1, [pc, #460]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e06:	e001      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d041      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e20:	d02a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e26:	d824      	bhi.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e2c:	d008      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e32:	d81e      	bhi.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d010      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e40:	4b62      	ldr	r3, [pc, #392]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a61      	ldr	r2, [pc, #388]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e4c:	e015      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fa73 	bl	8002340 <RCCEx_PLLSAI1_Config>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e5e:	e00c      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3320      	adds	r3, #32
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fb5e 	bl	8002528 <RCCEx_PLLSAI2_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e70:	e003      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	74fb      	strb	r3, [r7, #19]
      break;
 8001e76:	e000      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e80:	4b52      	ldr	r3, [pc, #328]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e8e:	494f      	ldr	r1, [pc, #316]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e96:	e001      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a0 	beq.w	8001fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b41      	ldr	r3, [pc, #260]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	4a40      	ldr	r2, [pc, #256]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fda4 	bl	8000a38 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef2:	e009      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fda0 	bl	8000a38 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	74fb      	strb	r3, [r7, #19]
        break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f08:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ef      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d15c      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01f      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d019      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fd5f 	bl	8000a38 <HAL_GetTick>
 8001f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fd5b 	bl	8000a38 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d902      	bls.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	74fb      	strb	r3, [r7, #19]
            break;
 8001f94:	e006      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ec      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fba:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	74bb      	strb	r3, [r7, #18]
 8001fc8:	e006      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd8:	7c7b      	ldrb	r3, [r7, #17]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b9e      	ldr	r3, [pc, #632]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	4a9d      	ldr	r2, [pc, #628]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff6:	4b98      	ldr	r3, [pc, #608]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffc:	f023 0203 	bic.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002004:	4994      	ldr	r1, [pc, #592]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002018:	4b8f      	ldr	r3, [pc, #572]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	f023 020c 	bic.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	498c      	ldr	r1, [pc, #560]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800203a:	4b87      	ldr	r3, [pc, #540]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	4983      	ldr	r1, [pc, #524]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	497b      	ldr	r1, [pc, #492]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	4972      	ldr	r1, [pc, #456]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	496a      	ldr	r1, [pc, #424]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c2:	4b65      	ldr	r3, [pc, #404]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	4961      	ldr	r1, [pc, #388]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	4959      	ldr	r1, [pc, #356]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002106:	4b54      	ldr	r3, [pc, #336]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002114:	4950      	ldr	r1, [pc, #320]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002128:	4b4b      	ldr	r3, [pc, #300]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	4948      	ldr	r1, [pc, #288]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	493f      	ldr	r1, [pc, #252]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d028      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800216c:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800217a:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800218a:	d106      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]
 8002198:	e011      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800219e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021a2:	d10c      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f8c8 	bl	8002340 <RCCEx_PLLSAI1_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d028      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021ca:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d8:	491f      	ldr	r1, [pc, #124]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f4:	60d3      	str	r3, [r2, #12]
 80021f6:	e011      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002200:	d10c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3304      	adds	r3, #4
 8002206:	2101      	movs	r1, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f899 	bl	8002340 <RCCEx_PLLSAI1_Config>
 800220e:	4603      	mov	r3, r0
 8002210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02b      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002246:	d109      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a02      	ldr	r2, [pc, #8]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002252:	60d3      	str	r3, [r2, #12]
 8002254:	e014      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f867 	bl	8002340 <RCCEx_PLLSAI1_Config>
 8002272:	4603      	mov	r3, r0
 8002274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02f      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228c:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800229a:	4928      	ldr	r1, [pc, #160]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022aa:	d10d      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	2102      	movs	r1, #2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f844 	bl	8002340 <RCCEx_PLLSAI1_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d014      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	74bb      	strb	r3, [r7, #18]
 80022c6:	e011      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3320      	adds	r3, #32
 80022d6:	2102      	movs	r1, #2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f925 	bl	8002528 <RCCEx_PLLSAI2_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002306:	490d      	ldr	r1, [pc, #52]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002320:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800232a:	4904      	ldr	r1, [pc, #16]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002332:	7cbb      	ldrb	r3, [r7, #18]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800234e:	4b75      	ldr	r3, [pc, #468]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d018      	beq.n	800238c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800235a:	4b72      	ldr	r3, [pc, #456]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d10d      	bne.n	8002386 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
       ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002372:	4b6c      	ldr	r3, [pc, #432]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
       ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d047      	beq.n	8002416 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e044      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d018      	beq.n	80023c6 <RCCEx_PLLSAI1_Config+0x86>
 8002394:	2b03      	cmp	r3, #3
 8002396:	d825      	bhi.n	80023e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002398:	2b01      	cmp	r3, #1
 800239a:	d002      	beq.n	80023a2 <RCCEx_PLLSAI1_Config+0x62>
 800239c:	2b02      	cmp	r3, #2
 800239e:	d009      	beq.n	80023b4 <RCCEx_PLLSAI1_Config+0x74>
 80023a0:	e020      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023a2:	4b60      	ldr	r3, [pc, #384]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11d      	bne.n	80023ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b2:	e01a      	b.n	80023ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d116      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e013      	b.n	80023ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023c6:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023d2:	4b54      	ldr	r3, [pc, #336]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023e2:	e006      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e004      	b.n	80023f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ea:	bf00      	nop
 80023ec:	e002      	b.n	80023f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	430b      	orrs	r3, r1
 8002410:	4944      	ldr	r1, [pc, #272]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d17d      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800241c:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a40      	ldr	r2, [pc, #256]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe fb06 	bl	8000a38 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800242e:	e009      	b.n	8002444 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002430:	f7fe fb02 	bl	8000a38 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	73fb      	strb	r3, [r7, #15]
        break;
 8002442:	e005      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ef      	bne.n	8002430 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d160      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6892      	ldr	r2, [r2, #8]
 800246c:	0211      	lsls	r1, r2, #8
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	0912      	lsrs	r2, r2, #4
 8002474:	0452      	lsls	r2, r2, #17
 8002476:	430a      	orrs	r2, r1
 8002478:	492a      	ldr	r1, [pc, #168]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	610b      	str	r3, [r1, #16]
 800247e:	e027      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d112      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002486:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800248e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	0211      	lsls	r1, r2, #8
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6912      	ldr	r2, [r2, #16]
 800249c:	0852      	lsrs	r2, r2, #1
 800249e:	3a01      	subs	r2, #1
 80024a0:	0552      	lsls	r2, r2, #21
 80024a2:	430a      	orrs	r2, r1
 80024a4:	491f      	ldr	r1, [pc, #124]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
 80024aa:	e011      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6892      	ldr	r2, [r2, #8]
 80024bc:	0211      	lsls	r1, r2, #8
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6952      	ldr	r2, [r2, #20]
 80024c2:	0852      	lsrs	r2, r2, #1
 80024c4:	3a01      	subs	r2, #1
 80024c6:	0652      	lsls	r2, r2, #25
 80024c8:	430a      	orrs	r2, r1
 80024ca:	4916      	ldr	r1, [pc, #88]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe faac 	bl	8000a38 <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024e2:	e009      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e4:	f7fe faa8 	bl	8000a38 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	73fb      	strb	r3, [r7, #15]
          break;
 80024f6:	e005      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ef      	beq.n	80024e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4904      	ldr	r1, [pc, #16]	@ (8002524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000

08002528 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002536:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d018      	beq.n	8002574 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002542:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0203 	and.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d10d      	bne.n	800256e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
       ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800255a:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
       ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d047      	beq.n	80025fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e044      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d018      	beq.n	80025ae <RCCEx_PLLSAI2_Config+0x86>
 800257c:	2b03      	cmp	r3, #3
 800257e:	d825      	bhi.n	80025cc <RCCEx_PLLSAI2_Config+0xa4>
 8002580:	2b01      	cmp	r3, #1
 8002582:	d002      	beq.n	800258a <RCCEx_PLLSAI2_Config+0x62>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d009      	beq.n	800259c <RCCEx_PLLSAI2_Config+0x74>
 8002588:	e020      	b.n	80025cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800258a:	4b55      	ldr	r3, [pc, #340]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11d      	bne.n	80025d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259a:	e01a      	b.n	80025d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e013      	b.n	80025d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ae:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ca:	e006      	b.n	80025da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e004      	b.n	80025dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025d2:	bf00      	nop
 80025d4:	e002      	b.n	80025dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025d6:	bf00      	nop
 80025d8:	e000      	b.n	80025dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025da:	bf00      	nop
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025e2:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	430b      	orrs	r3, r1
 80025f8:	4939      	ldr	r1, [pc, #228]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d167      	bne.n	80026d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a35      	ldr	r2, [pc, #212]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fe fa12 	bl	8000a38 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002616:	e009      	b.n	800262c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002618:	f7fe fa0e 	bl	8000a38 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	73fb      	strb	r3, [r7, #15]
        break;
 800262a:	e005      	b.n	8002638 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800262c:	4b2c      	ldr	r3, [pc, #176]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ef      	bne.n	8002618 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d14a      	bne.n	80026d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002644:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800264c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	0211      	lsls	r1, r2, #8
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	0912      	lsrs	r2, r2, #4
 800265c:	0452      	lsls	r2, r2, #17
 800265e:	430a      	orrs	r2, r1
 8002660:	491f      	ldr	r1, [pc, #124]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	614b      	str	r3, [r1, #20]
 8002666:	e011      	b.n	800268c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002668:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002670:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6892      	ldr	r2, [r2, #8]
 8002678:	0211      	lsls	r1, r2, #8
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6912      	ldr	r2, [r2, #16]
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	0652      	lsls	r2, r2, #25
 8002684:	430a      	orrs	r2, r1
 8002686:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	4313      	orrs	r3, r2
 800268a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe f9ce 	bl	8000a38 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a0:	f7fe f9ca 	bl	8000a38 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
          break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026b4:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ef      	beq.n	80026a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4904      	ldr	r1, [pc, #16]	@ (80026e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e040      	b.n	8002778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe f858 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	@ 0x24
 8002710:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fb6a 	bl	8002e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f8af 	bl	8002894 <UART_SetConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01b      	b.n	8002778 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800274e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800275e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fbe9 	bl	8002f48 <UART_CheckIdleState>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002794:	2b20      	cmp	r3, #32
 8002796:	d177      	bne.n	8002888 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_UART_Transmit+0x24>
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e070      	b.n	800288a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2221      	movs	r2, #33	@ 0x21
 80027b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b6:	f7fe f93f 	bl	8000a38 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d4:	d108      	bne.n	80027e8 <HAL_UART_Transmit+0x68>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e003      	b.n	80027f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027f0:	e02f      	b.n	8002852 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fc4b 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d004      	beq.n	8002812 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e03b      	b.n	800288a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002824:	b292      	uxth	r2, r2
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	3302      	adds	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e007      	b.n	8002840 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1c9      	bne.n	80027f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	@ 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fc15 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e005      	b.n	800288a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b08a      	sub	sp, #40	@ 0x28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002b54 <UART_SetConfig+0x2c0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a99      	ldr	r2, [pc, #612]	@ (8002b58 <UART_SetConfig+0x2c4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	4313      	orrs	r3, r2
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a90      	ldr	r2, [pc, #576]	@ (8002b5c <UART_SetConfig+0x2c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d126      	bne.n	800296c <UART_SetConfig+0xd8>
 800291e:	4b90      	ldr	r3, [pc, #576]	@ (8002b60 <UART_SetConfig+0x2cc>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d81b      	bhi.n	8002964 <UART_SetConfig+0xd0>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <UART_SetConfig+0xa0>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002955 	.word	0x08002955
 800293c:	0800294d 	.word	0x0800294d
 8002940:	0800295d 	.word	0x0800295d
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	e116      	b.n	8002b7a <UART_SetConfig+0x2e6>
 800294c:	2302      	movs	r3, #2
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002952:	e112      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002954:	2304      	movs	r3, #4
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295a:	e10e      	b.n	8002b7a <UART_SetConfig+0x2e6>
 800295c:	2308      	movs	r3, #8
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002962:	e10a      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002964:	2310      	movs	r3, #16
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296a:	e106      	b.n	8002b7a <UART_SetConfig+0x2e6>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a7c      	ldr	r2, [pc, #496]	@ (8002b64 <UART_SetConfig+0x2d0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d138      	bne.n	80029e8 <UART_SetConfig+0x154>
 8002976:	4b7a      	ldr	r3, [pc, #488]	@ (8002b60 <UART_SetConfig+0x2cc>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b0c      	cmp	r3, #12
 8002982:	d82d      	bhi.n	80029e0 <UART_SetConfig+0x14c>
 8002984:	a201      	add	r2, pc, #4	@ (adr r2, 800298c <UART_SetConfig+0xf8>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029e1 	.word	0x080029e1
 8002994:	080029e1 	.word	0x080029e1
 8002998:	080029e1 	.word	0x080029e1
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029e1 	.word	0x080029e1
 80029a4:	080029e1 	.word	0x080029e1
 80029a8:	080029e1 	.word	0x080029e1
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029e1 	.word	0x080029e1
 80029bc:	080029d9 	.word	0x080029d9
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c6:	e0d8      	b.n	8002b7a <UART_SetConfig+0x2e6>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ce:	e0d4      	b.n	8002b7a <UART_SetConfig+0x2e6>
 80029d0:	2304      	movs	r3, #4
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d6:	e0d0      	b.n	8002b7a <UART_SetConfig+0x2e6>
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029de:	e0cc      	b.n	8002b7a <UART_SetConfig+0x2e6>
 80029e0:	2310      	movs	r3, #16
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e0c8      	b.n	8002b7a <UART_SetConfig+0x2e6>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002b68 <UART_SetConfig+0x2d4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d125      	bne.n	8002a3e <UART_SetConfig+0x1aa>
 80029f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b60 <UART_SetConfig+0x2cc>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029fc:	2b30      	cmp	r3, #48	@ 0x30
 80029fe:	d016      	beq.n	8002a2e <UART_SetConfig+0x19a>
 8002a00:	2b30      	cmp	r3, #48	@ 0x30
 8002a02:	d818      	bhi.n	8002a36 <UART_SetConfig+0x1a2>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d00a      	beq.n	8002a1e <UART_SetConfig+0x18a>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d814      	bhi.n	8002a36 <UART_SetConfig+0x1a2>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <UART_SetConfig+0x182>
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d008      	beq.n	8002a26 <UART_SetConfig+0x192>
 8002a14:	e00f      	b.n	8002a36 <UART_SetConfig+0x1a2>
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1c:	e0ad      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a24:	e0a9      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a26:	2304      	movs	r3, #4
 8002a28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2c:	e0a5      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a34:	e0a1      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a36:	2310      	movs	r3, #16
 8002a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3c:	e09d      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <UART_SetConfig+0x2d8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d125      	bne.n	8002a94 <UART_SetConfig+0x200>
 8002a48:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <UART_SetConfig+0x2cc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a54:	d016      	beq.n	8002a84 <UART_SetConfig+0x1f0>
 8002a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a58:	d818      	bhi.n	8002a8c <UART_SetConfig+0x1f8>
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d00a      	beq.n	8002a74 <UART_SetConfig+0x1e0>
 8002a5e:	2b80      	cmp	r3, #128	@ 0x80
 8002a60:	d814      	bhi.n	8002a8c <UART_SetConfig+0x1f8>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <UART_SetConfig+0x1d8>
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d008      	beq.n	8002a7c <UART_SetConfig+0x1e8>
 8002a6a:	e00f      	b.n	8002a8c <UART_SetConfig+0x1f8>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a72:	e082      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7a:	e07e      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e07a      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a84:	2308      	movs	r3, #8
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e076      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a92:	e072      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <UART_SetConfig+0x2dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12a      	bne.n	8002af4 <UART_SetConfig+0x260>
 8002a9e:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <UART_SetConfig+0x2cc>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aac:	d01a      	beq.n	8002ae4 <UART_SetConfig+0x250>
 8002aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab2:	d81b      	bhi.n	8002aec <UART_SetConfig+0x258>
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab8:	d00c      	beq.n	8002ad4 <UART_SetConfig+0x240>
 8002aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002abe:	d815      	bhi.n	8002aec <UART_SetConfig+0x258>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <UART_SetConfig+0x238>
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac8:	d008      	beq.n	8002adc <UART_SetConfig+0x248>
 8002aca:	e00f      	b.n	8002aec <UART_SetConfig+0x258>
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad2:	e052      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ada:	e04e      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002adc:	2304      	movs	r3, #4
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae2:	e04a      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aea:	e046      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002aec:	2310      	movs	r3, #16
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af2:	e042      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <UART_SetConfig+0x2c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d13a      	bne.n	8002b74 <UART_SetConfig+0x2e0>
 8002afe:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <UART_SetConfig+0x2cc>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b0c:	d01a      	beq.n	8002b44 <UART_SetConfig+0x2b0>
 8002b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b12:	d81b      	bhi.n	8002b4c <UART_SetConfig+0x2b8>
 8002b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b18:	d00c      	beq.n	8002b34 <UART_SetConfig+0x2a0>
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b1e:	d815      	bhi.n	8002b4c <UART_SetConfig+0x2b8>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <UART_SetConfig+0x298>
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b28:	d008      	beq.n	8002b3c <UART_SetConfig+0x2a8>
 8002b2a:	e00f      	b.n	8002b4c <UART_SetConfig+0x2b8>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b32:	e022      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002b34:	2302      	movs	r3, #2
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3a:	e01e      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b42:	e01a      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002b44:	2308      	movs	r3, #8
 8002b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4a:	e016      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b52:	e012      	b.n	8002b7a <UART_SetConfig+0x2e6>
 8002b54:	efff69f3 	.word	0xefff69f3
 8002b58:	40008000 	.word	0x40008000
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40004800 	.word	0x40004800
 8002b6c:	40004c00 	.word	0x40004c00
 8002b70:	40005000 	.word	0x40005000
 8002b74:	2310      	movs	r3, #16
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a9f      	ldr	r2, [pc, #636]	@ (8002dfc <UART_SetConfig+0x568>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d17a      	bne.n	8002c7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d824      	bhi.n	8002bd6 <UART_SetConfig+0x342>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <UART_SetConfig+0x300>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bb9 	.word	0x08002bb9
 8002b98:	08002bd7 	.word	0x08002bd7
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002bd7 	.word	0x08002bd7
 8002ba4:	08002bc7 	.word	0x08002bc7
 8002ba8:	08002bd7 	.word	0x08002bd7
 8002bac:	08002bd7 	.word	0x08002bd7
 8002bb0:	08002bd7 	.word	0x08002bd7
 8002bb4:	08002bcf 	.word	0x08002bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f7ff f84c 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002bbc:	61f8      	str	r0, [r7, #28]
        break;
 8002bbe:	e010      	b.n	8002be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e00 <UART_SetConfig+0x56c>)
 8002bc2:	61fb      	str	r3, [r7, #28]
        break;
 8002bc4:	e00d      	b.n	8002be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc6:	f7fe ffad 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8002bca:	61f8      	str	r0, [r7, #28]
        break;
 8002bcc:	e009      	b.n	8002be2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bd2:	61fb      	str	r3, [r7, #28]
        break;
 8002bd4:	e005      	b.n	8002be2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80fb 	beq.w	8002de0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d305      	bcc.n	8002c06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d903      	bls.n	8002c0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c0c:	e0e8      	b.n	8002de0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2200      	movs	r2, #0
 8002c12:	461c      	mov	r4, r3
 8002c14:	4615      	mov	r5, r2
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	022b      	lsls	r3, r5, #8
 8002c20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c24:	0222      	lsls	r2, r4, #8
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	6849      	ldr	r1, [r1, #4]
 8002c2a:	0849      	lsrs	r1, r1, #1
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4688      	mov	r8, r1
 8002c30:	4681      	mov	r9, r0
 8002c32:	eb12 0a08 	adds.w	sl, r2, r8
 8002c36:	eb43 0b09 	adc.w	fp, r3, r9
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c48:	4650      	mov	r0, sl
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	f7fd fabc 	bl	80001c8 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c5e:	d308      	bcc.n	8002c72 <UART_SetConfig+0x3de>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c66:	d204      	bcs.n	8002c72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	e0b6      	b.n	8002de0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c78:	e0b2      	b.n	8002de0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c82:	d15e      	bne.n	8002d42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d828      	bhi.n	8002cde <UART_SetConfig+0x44a>
 8002c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <UART_SetConfig+0x400>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08002cdf 	.word	0x08002cdf
 8002ca4:	08002ccf 	.word	0x08002ccf
 8002ca8:	08002cdf 	.word	0x08002cdf
 8002cac:	08002cdf 	.word	0x08002cdf
 8002cb0:	08002cdf 	.word	0x08002cdf
 8002cb4:	08002cd7 	.word	0x08002cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7fe ffcc 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	61f8      	str	r0, [r7, #28]
        break;
 8002cbe:	e014      	b.n	8002cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc0:	f7fe ffde 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	61f8      	str	r0, [r7, #28]
        break;
 8002cc6:	e010      	b.n	8002cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e00 <UART_SetConfig+0x56c>)
 8002cca:	61fb      	str	r3, [r7, #28]
        break;
 8002ccc:	e00d      	b.n	8002cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cce:	f7fe ff29 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8002cd2:	61f8      	str	r0, [r7, #28]
        break;
 8002cd4:	e009      	b.n	8002cea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cda:	61fb      	str	r3, [r7, #28]
        break;
 8002cdc:	e005      	b.n	8002cea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d077      	beq.n	8002de0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005a      	lsls	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d916      	bls.n	8002d3a <UART_SetConfig+0x4a6>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d12:	d212      	bcs.n	8002d3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f023 030f 	bic.w	r3, r3, #15
 8002d1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	8afb      	ldrh	r3, [r7, #22]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	8afa      	ldrh	r2, [r7, #22]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	e052      	b.n	8002de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d40:	e04e      	b.n	8002de0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d827      	bhi.n	8002d9a <UART_SetConfig+0x506>
 8002d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <UART_SetConfig+0x4bc>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d75 	.word	0x08002d75
 8002d54:	08002d7d 	.word	0x08002d7d
 8002d58:	08002d85 	.word	0x08002d85
 8002d5c:	08002d9b 	.word	0x08002d9b
 8002d60:	08002d8b 	.word	0x08002d8b
 8002d64:	08002d9b 	.word	0x08002d9b
 8002d68:	08002d9b 	.word	0x08002d9b
 8002d6c:	08002d9b 	.word	0x08002d9b
 8002d70:	08002d93 	.word	0x08002d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d74:	f7fe ff6e 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002d78:	61f8      	str	r0, [r7, #28]
        break;
 8002d7a:	e014      	b.n	8002da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d7c:	f7fe ff80 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8002d80:	61f8      	str	r0, [r7, #28]
        break;
 8002d82:	e010      	b.n	8002da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <UART_SetConfig+0x56c>)
 8002d86:	61fb      	str	r3, [r7, #28]
        break;
 8002d88:	e00d      	b.n	8002da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8a:	f7fe fecb 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8002d8e:	61f8      	str	r0, [r7, #28]
        break;
 8002d90:	e009      	b.n	8002da6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d96:	61fb      	str	r3, [r7, #28]
        break;
 8002d98:	e005      	b.n	8002da6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002da4:	bf00      	nop
    }

    if (pclk != 0U)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d019      	beq.n	8002de0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	085a      	lsrs	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	d909      	bls.n	8002dda <UART_SetConfig+0x546>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d205      	bcs.n	8002dda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	e002      	b.n	8002de0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	@ 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40008000 	.word	0x40008000
 8002e00:	00f42400 	.word	0x00f42400

08002e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01a      	beq.n	8002f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f02:	d10a      	bne.n	8002f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b098      	sub	sp, #96	@ 0x60
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f58:	f7fd fd6e 	bl	8000a38 <HAL_GetTick>
 8002f5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d12e      	bne.n	8002fca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f74:	2200      	movs	r2, #0
 8002f76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f88c 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d021      	beq.n	8002fca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e6      	bne.n	8002f86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e062      	b.n	8003090 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d149      	bne.n	800306c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f856 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03c      	beq.n	800306c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
 8003012:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e6      	bne.n	8002ff2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	60fb      	str	r3, [r7, #12]
   return(result);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3308      	adds	r3, #8
 8003042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	69b9      	ldr	r1, [r7, #24]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	617b      	str	r3, [r7, #20]
   return(result);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e011      	b.n	8003090 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3758      	adds	r7, #88	@ 0x58
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a8:	e04f      	b.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d04b      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fd fcc1 	bl	8000a38 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e04e      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d037      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b80      	cmp	r3, #128	@ 0x80
 80030de:	d034      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d031      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d110      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2208      	movs	r2, #8
 80030fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f838 	bl	8003172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2208      	movs	r2, #8
 8003106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e029      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003124:	d111      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800312e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f81e 	bl	8003172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00f      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d0a0      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003172:	b480      	push	{r7}
 8003174:	b095      	sub	sp, #84	@ 0x54
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800318e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003198:	643b      	str	r3, [r7, #64]	@ 0x40
 800319a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800319e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e6      	bne.n	800317a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3308      	adds	r3, #8
 80031b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d118      	bne.n	800321a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f023 0310 	bic.w	r3, r3, #16
 80031fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	613b      	str	r3, [r7, #16]
   return(result);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e6      	bne.n	80031e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800322e:	bf00      	nop
 8003230:	3754      	adds	r7, #84	@ 0x54
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <memset>:
 800323a:	4402      	add	r2, r0
 800323c:	4603      	mov	r3, r0
 800323e:	4293      	cmp	r3, r2
 8003240:	d100      	bne.n	8003244 <memset+0xa>
 8003242:	4770      	bx	lr
 8003244:	f803 1b01 	strb.w	r1, [r3], #1
 8003248:	e7f9      	b.n	800323e <memset+0x4>
	...

0800324c <__libc_init_array>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4d0d      	ldr	r5, [pc, #52]	@ (8003284 <__libc_init_array+0x38>)
 8003250:	4c0d      	ldr	r4, [pc, #52]	@ (8003288 <__libc_init_array+0x3c>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	2600      	movs	r6, #0
 8003258:	42a6      	cmp	r6, r4
 800325a:	d109      	bne.n	8003270 <__libc_init_array+0x24>
 800325c:	4d0b      	ldr	r5, [pc, #44]	@ (800328c <__libc_init_array+0x40>)
 800325e:	4c0c      	ldr	r4, [pc, #48]	@ (8003290 <__libc_init_array+0x44>)
 8003260:	f000 f818 	bl	8003294 <_init>
 8003264:	1b64      	subs	r4, r4, r5
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	2600      	movs	r6, #0
 800326a:	42a6      	cmp	r6, r4
 800326c:	d105      	bne.n	800327a <__libc_init_array+0x2e>
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	f855 3b04 	ldr.w	r3, [r5], #4
 8003274:	4798      	blx	r3
 8003276:	3601      	adds	r6, #1
 8003278:	e7ee      	b.n	8003258 <__libc_init_array+0xc>
 800327a:	f855 3b04 	ldr.w	r3, [r5], #4
 800327e:	4798      	blx	r3
 8003280:	3601      	adds	r6, #1
 8003282:	e7f2      	b.n	800326a <__libc_init_array+0x1e>
 8003284:	0800330c 	.word	0x0800330c
 8003288:	0800330c 	.word	0x0800330c
 800328c:	0800330c 	.word	0x0800330c
 8003290:	08003310 	.word	0x08003310

08003294 <_init>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr

080032a0 <_fini>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr
